import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

# Configura√ß√£o da p√°gina do Streamlit com layout amplo e t√≠tulo personalizado
st.set_page_config(layout='wide', page_title='Dashboard Monitoramento de M√°quinas')

# T√≠tulo colorido com emojis (Streamlit suporta markdown colorido e emojis)
st.title(":green[Dashboard] :red[Monitoramento] :blue[de M√°quinas] :bar_chart:")

# *---------------------------------*
# 	Carregando arquivo de DADOS
# *---------------------------------*
dados = pd.read_csv('smart_manufacturing_data.csv')

# Converter a coluna 'timestamp' para tipo datetime para manipula√ß√£o de datas
dados['timestamp'] = pd.to_datetime(dados['timestamp'])

# ---------- FILTROS NA SIDEBAR -----------

# L√≥gica e interface para filtros (m√°quina, status, anomalia e intervalo de datas)
with st.sidebar:
    # Caixinha estilizada para os filtros
    st.markdown(
        """
        <div style="
            background: linear-gradient(90deg, #4ade80, #22d3ee);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(34, 211, 238, 0.45);
            text-align: center;
            margin-bottom: 30px;
            ">
            <h1 style="
                font-family: 'Poppins', sans-serif;
                font-weight: 900;
                color: white;
                margin: 0;
                font-size: 28px;
                text-shadow: 0 0 10px rgba(255,255,255,0.8);
            ">
                üìä FILTROS
            </h1>
            <p style="
                font-family: 'Poppins', sans-serif;
                font-weight: 600;
                color: white;
                margin-top: 5px;
                font-size: 14px;
                letter-spacing: 1.2px;
                text-transform: uppercase;
            ">Selecione os dados</p>
        </div>
        """,
        unsafe_allow_html=True
    )

    # Checkbox para sele√ß√£o r√°pida de todas as m√°quinas (ignorar filtros de m√°quina)
    todas_maquinas = st.checkbox("Selecionar todas as m√°quinas", value=True)  # Marcado por padr√£o

    if todas_maquinas:
        # Se selecionar todas as m√°quinas, copia todo o dataset para filtragem posterior
        dados_filtrados = dados.copy()
    else:
        # Op√ß√£o entre filtro m√∫ltiplo ou filtro √∫nico
        filtrar_multiplas = st.checkbox("Deseja filtrar mais de 1 m√°quina?")

        if filtrar_multiplas:
            # Multiselect para m√°quinas, status e anomalias - permite v√°rias sele√ß√µes
            machine_filter = st.multiselect("Selecione uma ou mais M√°quinas:", dados['machine'].unique(), default=dados['machine'].unique())
            status_filter = st.multiselect("Selecione um ou mais Status da M√°quina:", dados['machine_status'].unique(), default=dados['machine_status'].unique())
            anomaly_filter = st.multiselect("Selecione um ou mais Sinalizadores de Anomalia:", dados['anomaly_flag'].unique(), default=dados['anomaly_flag'].unique())

            # Aplicar filtros m√∫ltiplos no DataFrame original
            dados_filtrados = dados[
                (dados['machine'].isin(machine_filter)) &
                (dados['machine_status'].isin(status_filter)) &
                (dados['anomaly_flag'].isin(anomaly_filter))
            ]
        else:
            # Selecione √∫nica op√ß√£o para cada filtro com selectbox
            machine_filter = st.selectbox("Selecione a M√°quina:", dados['machine'].unique())
            status_filter = st.selectbox("Selecione o Status da M√°quina:", dados['machine_status'].unique())
            anomaly_filter = st.selectbox("Selecione o Sinalizador de Anomalia:", dados['anomaly_flag'].unique())

            # Dados filtrados conforme sele√ß√µes √∫nicas
            dados_filtrados = dados[
                (dados['machine'] == machine_filter) &
                (dados['machine_status'] == status_filter) &
                (dados['anomaly_flag'] == anomaly_filter)
            ]

    # ----------------------- Filtro de intervalo de datas ----------------------
    st.subheader("Filtro por Data")
    # Determinar as datas m√≠nima e m√°xima dispon√≠veis no dataset
    data_min = dados['timestamp'].min().date()
    data_max = dados['timestamp'].max().date()

    # Slider para sele√ß√£o do intervalo de datas pelo usu√°rio
    data_selecionada = st.slider("Selecione o intervalo de datas:",
                                 min_value=data_min,
                                 max_value=data_max,
                                 value=(data_min, data_max))

    # Aplicar filtro no intervalo de datas selecionado ao dataset j√° filtrado
    dados_filtrados = dados_filtrados[
        (dados_filtrados['timestamp'].dt.date >= data_selecionada[0]) &
        (dados_filtrados['timestamp'].dt.date <= data_selecionada[1])
    ]

# ---------- ESTRUTURA PRINCIPAL DO DASHBOARD COM ABAS -----------

# Criar abas para separar visualmente diferentes tipos de an√°lises e gr√°ficos
abas = st.tabs(["Gr√°ficos", "An√°lise", "Matriz de Correla√ß√£o", "M√©dia por Sensores"])

with abas[0]:
    st.header("Gr√°ficos de Monitoramento de M√°quinas")

    # Gr√°fico 1: Temperatura m√©dia por m√°quina (barras)
    fig1 = px.bar(
        dados_filtrados.groupby('machine')['temperature'].mean().reset_index(),
        x='machine',
        y='temperature',
        title='Temperatura M√©dia por M√°quina'
    )
    st.plotly_chart(fig1, use_container_width=True)

    # Gr√°fico 2: Vibra√ß√£o m√©dia por m√°quina (barras)
    fig2 = px.bar(
        dados_filtrados.groupby('machine')['vibration'].mean().reset_index(),
        x='machine',
        y='vibration',
        title='Vibra√ß√£o M√©dia por M√°quina'
    )
    st.plotly_chart(fig2, use_container_width=True)

    # Gr√°fico 3: Consumo total de energia por m√°quina (barras)
    fig3 = px.bar(
        dados_filtrados.groupby('machine')['energy_consumption'].sum().reset_index(),
        x='machine',
        y='energy_consumption',
        title='Consumo Total de Energia por M√°quina'
    )
    st.plotly_chart(fig3, use_container_width=True)

    # Gr√°fico 4: Anomalias por tipo de falha (histograma colorido)
    fig4 = px.histogram(
        dados_filtrados,
        x='failure_type',
        color='anomaly_flag',
        title='Anomalias por Tipo de Falha'
    )
    st.plotly_chart(fig4, use_container_width=True)

    # Gr√°fico 5: Distribui√ß√£o do status das m√°quinas (pizza)
    fig5 = px.pie(
        dados_filtrados,
        names='machine_status',
        title='Distribui√ß√£o do Status das M√°quinas'
    )
    st.plotly_chart(fig5, use_container_width=True)

    # Gr√°fico 6: Temperatura vs Vibra√ß√£o (dispers√£o colorida)
    fig6 = px.scatter(
        dados_filtrados,
        x='temperature',
        y='vibration',
        color='anomaly_flag',
        title='Temperatura vs Vibra√ß√£o'
    )
    st.plotly_chart(fig6, use_container_width=True)

    # Gr√°fico 7: Umidade m√©dia por m√°quina (barras)
    fig7 = px.bar(
        dados_filtrados.groupby('machine')['humidity'].mean().reset_index(),
        x='machine',
        y='humidity',
        title='Umidade M√©dia por M√°quina'
    )
    st.plotly_chart(fig7, use_container_width=True)

    # Gr√°fico 8: Press√£o m√©dia por m√°quina (barras)
    fig8 = px.bar(
        dados_filtrados.groupby('machine')['pressure'].mean().reset_index(),
        x='machine',
        y='pressure',
        title='Press√£o M√©dia por M√°quina'
    )
    st.plotly_chart(fig8, use_container_width=True)

    # Gr√°fico 9: Evolu√ß√£o temporal da temperatura m√©dia geral (linha)
    temp_tempo = dados_filtrados.groupby('timestamp')['temperature'].mean().reset_index()
    fig9 = px.line(
        temp_tempo,
        x='timestamp',
        y='temperature',
        title='Evolu√ß√£o Temporal da Temperatura M√©dia'
    )
    st.plotly_chart(fig9, use_container_width=True)

    # Gr√°fico 10: Boxplot da vibra√ß√£o por m√°quina
    fig10 = px.box(
        dados_filtrados,
        x='machine',
        y='vibration',
        title='Distribui√ß√£o da Vibra√ß√£o por M√°quina'
    )
    st.plotly_chart(fig10, use_container_width=True)

    # Gr√°fico 11: Dispers√£o 3D temperatura, vibra√ß√£o e consumo de energia
    fig11 = px.scatter_3d(
        dados_filtrados,
        x='temperature',
        y='vibration',
        z='energy_consumption',
        color='machine_status',
        opacity=0.7,
        title='Gr√°fico 3D: Temperatura, Vibra√ß√£o e Consumo de Energia'
    )
    st.plotly_chart(fig11, use_container_width=True)

    # Gr√°fico 12: Heatmap temporal da temperatura m√©dia di√°ria por m√°quina
    dados_filtrados['date'] = dados_filtrados['timestamp'].dt.date
    heatmap_data = dados_filtrados.groupby(['machine', 'date'])['temperature'].mean().reset_index()
    heatmap_pivot = heatmap_data.pivot(index='machine', columns='date', values='temperature')
    plt.figure(figsize=(12, 7))
    plt.imshow(heatmap_pivot, cmap='coolwarm', aspect='auto')
    plt.colorbar(label='Temperatura M√©dia')
    plt.title('Heatmap - Temperatura M√©dia Di√°ria por M√°quina')
    plt.xlabel('Data')
    plt.ylabel('M√°quina')
    st.pyplot(plt)
    plt.close()  # Fecha figura para evitar sobreposi√ß√£o em execu√ß√µes futuras

with abas[1]:
    st.header("An√°lise de Manuten√ß√£o")

    # Mapear valores "Yes" e "no" da coluna maintenance_required para 1 e 0
    dados_filtrados['maintenance_required'] = dados_filtrados['maintenance_required'].map({'Yes': 1, 'no': 0})

    # Filtrar m√°quinas que precisam de manuten√ß√£o (valor 1)
    manutencao_necessaria = dados_filtrados[dados_filtrados['maintenance_required'] == 1]
    num_machines_needing_maintenance = manutencao_necessaria['machine'].nunique()

    # Mostrar n√∫mero de m√°quinas que requerem manuten√ß√£o
    st.markdown(f"### N√∫mero de m√°quinas que requerem manuten√ß√£o: {num_machines_needing_maintenance}")

    # Exibir lista das m√°quinas que precisam de manuten√ß√£o
    maquinas_df = pd.DataFrame(manutencao_necessaria['machine'].unique(), columns=['M√°quinas que precisam de manuten√ß√£o'])
    st.dataframe(maquinas_df, height=200)

    # Gr√°fico da distribui√ß√£o do risco de inatividade (histograma)
    fig_risco = px.histogram(
        dados_filtrados,
        x='downtime_risk',
        title='Distribui√ß√£o do Risco de Inatividade'
    )
    st.plotly_chart(fig_risco, use_container_width=True)

    # Gr√°fico 13: Violino da press√£o por status da m√°quina
    fig13 = px.violin(
        dados_filtrados,
        y='pressure',
        x='machine_status',
        color='machine_status',
        box=True,
        points='all',
        title='Distribui√ß√£o da Press√£o por Status da M√°quina'
    )
    st.plotly_chart(fig13, use_container_width=True)

    # Gr√°fico 14: Barras agrupadas da m√©dia de temperatura e vibra√ß√£o por status da m√°quina
    media_status = dados_filtrados.groupby('machine_status')[['temperature', 'vibration']].mean().reset_index()
    fig14 = px.bar(
        media_status,
        x='machine_status',
        y=['temperature', 'vibration'],
        barmode='group',
        title='M√©dia de Temperatura e Vibra√ß√£o por Status da M√°quina'
    )
    st.plotly_chart(fig14, use_container_width=True)

with abas[2]:
    st.header("Matriz de Correla√ß√£o")

    # Selecionar colunas num√©ricas para correla√ß√£o
    colunas_numericas = dados_filtrados.select_dtypes(include=['float64', 'int64'])
    correlacao = colunas_numericas.corr()

    # Plotar matriz de correla√ß√£o com matplotlib
    plt.figure(figsize=(10, 8))
    plt.imshow(correlacao, cmap='coolwarm', aspect='auto')
    plt.colorbar(label='Correla√ß√£o')
    plt.title("Matriz de Correla√ß√£o entre Features")
    st.pyplot(plt)
    plt.close()

with abas[3]:
    st.header("M√©dia por Sensores")

    # Definir colunas correspondentes aos sensores para c√°lculo de m√©dia
    colunas_sensores = ['temperature', 'vibration', 'humidity', 'pressure', 'energy_consumption']

    # Calcular a m√©dia dos sensores por m√°quina
    medias_por_maquina = dados_filtrados.groupby('machine')[colunas_sensores].mean().reset_index()

    # Exibir tabela formatada com 2 casas decimais para as m√©dias dos sensores
    st.dataframe(
        medias_por_maquina.style.format({col: '{:.2f}' for col in colunas_sensores}),
        height=600
    )

# Rodap√© com o nome do acad√™mico
st.markdown("<br><br><hr><p style='text-align: center;'>Desenvolvido por: <strong>Darlan Pedro Caron Piaia</strong></p>", unsafe_allow_html=True)
